syntax = "proto3";
package cash.z.wallet.sdk.rpc;

message BlockID {
     uint64 height = 1;
     bytes hash = 2;
}

message ChainSpec {}
message Empty {}

message RawTransaction {
    bytes data = 1;     // exact data returned by Zcash 'getrawtransaction'
    uint64 height = 2;  // height that the transaction was mined (or -1)
}

message CompactBlock {
    uint32 protoVersion = 1;         // the version of this wire format, for storage
    uint64 height = 2;               // the height of this block
    bytes hash = 3;                  // the ID (hash) of this block, same as in block explorers
    bytes prevHash = 4;              // the ID (hash) of this block's predecessor
    uint32 time = 5;                 // Unix epoch time when the block was mined
    bytes header = 6;                // (hash, prevHash, and time) OR (full header)
    repeated CompactTx vtx = 7;      // zero or more compact transactions from this block
    ChainMetadata chainMetadata = 8; // information about the state of the chain as of this block
}

message CompactSaplingSpend {
    bytes nf = 1;   // Nullifier (see the Zcash protocol specification)
}

message CompactSaplingOutput {
    bytes cmu = 1;          // Note commitment u-coordinate.
    bytes ephemeralKey = 2; // Ephemeral public key.
    bytes ciphertext = 3;   // First 52 bytes of ciphertext.
}

message CompactOrchardAction {
    bytes nullifier = 1;        // [32] The nullifier of the input note
    bytes cmx = 2;              // [32] The x-coordinate of the note commitment for the output note
    bytes ephemeralKey = 3;     // [32] An encoding of an ephemeral Pallas public key
    bytes ciphertext = 4;       // [52] The first 52 bytes of the encCiphertext field
}

message CompactTx {
    uint64 index = 1;   // the index within the full block
    bytes hash = 2;     // the ID (hash) of this transaction, same as in block explorers

    uint32 fee = 3;

    repeated CompactSaplingSpend spends = 4;
    repeated CompactSaplingOutput outputs = 5;
    repeated CompactOrchardAction actions = 6;
}

message ChainMetadata {
    uint32 saplingCommitmentTreeSize = 1; // the size of the Sapling note commitment tree as of the end of this block
    uint32 orchardCommitmentTreeSize = 2; // the size of the Orchard note commitment tree as of the end of this block
}

message AddressList {
    repeated string addresses = 1;
}

message Balance {
    int64 valueZat = 1;
}

message TxFilter {
     BlockID block = 1;     // block identifier, height or hash
     uint64 index = 2;      // index within the block
     bytes hash = 3;        // transaction ID (hash, txid)
}

message Exclude {
    repeated bytes txid = 1;
}

service CompactTxStreamer {
    rpc GetLatestBlock(ChainSpec) returns (BlockID) {}
    rpc GetBlock(BlockID) returns (CompactBlock) {}
    rpc GetTaddressBalance(AddressList) returns (Balance) {}
    rpc GetTransaction(TxFilter) returns (RawTransaction) {}
    rpc GetMempoolTx(Exclude) returns (stream CompactTx) {}
    rpc GetMempoolStream(Empty) returns (stream RawTransaction) {}
}
